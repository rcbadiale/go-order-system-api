// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"clean_architecture/internal/events"
	"clean_architecture/internal/infra/database"
	"clean_architecture/internal/infra/web"
	"clean_architecture/internal/usecase"
	"clean_architecture/pkg/dispatcher"
	"database/sql"
	"github.com/google/wire"
)

import (
	_ "github.com/go-sql-driver/mysql"
	_ "github.com/golang-migrate/migrate/v4/source/file"
)

// Injectors from wire.go:

func NewCreateOrderUseCase(db *sql.DB, eventDispatcher dispatcher.EventDispatcherInterface) *usecase.CreateOrderUseCase {
	orderRepository := database.NewOrderRepository(db)
	orderCreated := events.NewOrderCreated()
	createOrderUseCase := usecase.NewCreateOrderUseCase(orderRepository, orderCreated, eventDispatcher)
	return createOrderUseCase
}

func NewListOrdersUseCase(db *sql.DB) *usecase.ListOrdersUseCase {
	orderRepository := database.NewOrderRepository(db)
	listOrdersUseCase := usecase.NewListOrdersUseCase(orderRepository)
	return listOrdersUseCase
}

func NewWebOrderHandler(db *sql.DB, eventDispatcher dispatcher.EventDispatcherInterface) *web.WebOrderHandler {
	orderRepository := database.NewOrderRepository(db)
	orderCreated := events.NewOrderCreated()
	webOrderHandler := web.NewWebOrderHandler(eventDispatcher, orderRepository, orderCreated)
	return webOrderHandler
}

// wire.go:

var setOrderRepositoryDependency = wire.NewSet(database.NewOrderRepository, wire.Bind(new(database.OrderRepositoryInterface), new(*database.OrderRepository)))

var setEventDispatcherDependency = wire.NewSet(dispatcher.NewEventDispatcher, events.NewOrderCreated, wire.Bind(new(dispatcher.EventInterface), new(*events.OrderCreated)), wire.Bind(new(dispatcher.EventDispatcherInterface), new(*dispatcher.EventDispatcher)))

var setOrderCreatedEvent = wire.NewSet(events.NewOrderCreated, wire.Bind(new(dispatcher.EventInterface), new(*events.OrderCreated)))
